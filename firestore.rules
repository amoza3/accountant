
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Check the user's custom claim for the superadmin role.
    // This is more secure than reading from the document.
    function isSuperAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    // Rules for the 'users' collection itself
    match /users/{userId} {
      // Anyone can create their own user document.
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Only the owner or a superadmin can read a user's profile.
      allow get: if isOwner(userId) || isSuperAdmin();
      
      // Only the owner can update their own profile.
      allow update: if isOwner(userId);
      
      // Nobody can delete a user profile for now.
      allow delete: if false;

      // Only a superadmin can list all user documents.
      allow list: if isSuperAdmin();
      
       // Rule for all subcollections within a user's document
       match /{document=**} {
         // The owner of the parent document or a superadmin can read.
         allow read: if isOwner(userId) || isSuperAdmin();
         // Only the owner can write to their own subcollections.
         allow write: if isOwner(userId);
       }
    }
  }
}
    